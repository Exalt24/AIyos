# Generated by Django 5.2.3 on 2025-06-20 17:43

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('provider_type', models.CharField(choices=[('openrouter', 'OpenRouter'), ('openai', 'OpenAI Direct'), ('anthropic', 'Anthropic Direct'), ('google', 'Google AI')], max_length=20)),
                ('api_endpoint', models.URLField()),
                ('is_active', models.BooleanField(default=True)),
                ('cost_per_input_token', models.DecimalField(decimal_places=6, default=0.0, max_digits=10)),
                ('cost_per_output_token', models.DecimalField(decimal_places=6, default=0.0, max_digits=10)),
                ('requests_per_minute', models.IntegerField(default=60)),
                ('tokens_per_minute', models.IntegerField(default=50000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'AI Provider',
                'verbose_name_plural': 'AI Providers',
                'db_table': 'ai_providers',
            },
        ),
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('model_id', models.CharField(help_text='API model identifier', max_length=200)),
                ('model_type', models.CharField(choices=[('chat', 'Chat Completion'), ('embedding', 'Text Embedding'), ('image', 'Image Generation'), ('audio', 'Audio Processing')], max_length=20)),
                ('capability_level', models.CharField(choices=[('basic', 'Basic'), ('advanced', 'Advanced'), ('premium', 'Premium')], max_length=20)),
                ('max_context_tokens', models.IntegerField(default=4000)),
                ('max_output_tokens', models.IntegerField(default=1000)),
                ('supports_functions', models.BooleanField(default=False)),
                ('supports_streaming', models.BooleanField(default=False)),
                ('supports_tagalog', models.BooleanField(default=False)),
                ('supports_filipino_context', models.BooleanField(default=False)),
                ('min_subscription_tier', models.CharField(choices=[('starter', 'Starter'), ('business', 'Business'), ('pro', 'Pro')], default='starter', max_length=20)),
                ('average_response_time_ms', models.IntegerField(default=1000)),
                ('reliability_score', models.FloatField(default=0.95)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='models', to='ai_services.aiprovider')),
            ],
            options={
                'verbose_name': 'AI Model',
                'verbose_name_plural': 'AI Models',
                'db_table': 'ai_models',
                'unique_together': {('provider', 'model_id')},
            },
        ),
        migrations.CreateModel(
            name='AIRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('request_type', models.CharField(choices=[('email_to_task', 'Email to Task Conversion'), ('content_generation', 'Content Generation'), ('text_analysis', 'Text Analysis'), ('translation', 'Translation'), ('summarization', 'Summarization'), ('sentiment_analysis', 'Sentiment Analysis'), ('data_extraction', 'Data Extraction'), ('workflow_optimization', 'Workflow Optimization')], max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('input_data', models.JSONField(help_text='Original input data')),
                ('processed_input', models.TextField(help_text='Processed prompt sent to AI')),
                ('output_data', models.JSONField(default=dict, help_text='AI response data')),
                ('input_tokens', models.IntegerField(default=0)),
                ('output_tokens', models.IntegerField(default=0)),
                ('total_tokens', models.IntegerField(default=0)),
                ('cost_usd', models.DecimalField(decimal_places=6, default=0.0, max_digits=10)),
                ('cost_php', models.DecimalField(decimal_places=4, default=0.0, max_digits=10)),
                ('response_time_ms', models.IntegerField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('error_code', models.CharField(blank=True, max_length=100)),
                ('retry_count', models.IntegerField(default=0)),
                ('workflow_execution', models.UUIDField(blank=True, help_text='Related workflow execution', null=True)),
                ('user_context', models.JSONField(default=dict, help_text='User business context')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='ai_services.aimodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Request',
                'verbose_name_plural': 'AI Requests',
                'db_table': 'ai_requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AITemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('tagalog_name', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('email_processing', 'Email Processing'), ('customer_service', 'Customer Service'), ('content_creation', 'Content Creation'), ('data_analysis', 'Data Analysis'), ('translation', 'Translation'), ('compliance', 'Government Compliance'), ('sales_marketing', 'Sales & Marketing')], max_length=50)),
                ('business_context', models.CharField(choices=[('bpo', 'BPO Company'), ('real_estate', 'Real Estate'), ('ecommerce', 'E-commerce'), ('restaurant', 'Restaurant'), ('retail', 'Retail'), ('agency', 'Agency'), ('ofw_family', 'OFW Family'), ('general', 'General Business')], max_length=50)),
                ('system_prompt', models.TextField(help_text='System prompt for AI model')),
                ('user_prompt_template', models.TextField(help_text='Template with variables like {email_content}')),
                ('example_input', models.JSONField(default=dict, help_text='Example input data')),
                ('example_output', models.JSONField(default=dict, help_text='Expected output format')),
                ('recommended_model_type', models.CharField(default='chat', max_length=20)),
                ('max_tokens', models.IntegerField(default=500)),
                ('temperature', models.FloatField(default=0.7)),
                ('supports_tagalog', models.BooleanField(default=True)),
                ('supports_mixed_language', models.BooleanField(default=True)),
                ('usage_count', models.IntegerField(default=0)),
                ('success_rate', models.FloatField(default=0.0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_premium', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Template',
                'verbose_name_plural': 'AI Templates',
                'db_table': 'ai_templates',
                'ordering': ['-usage_count'],
            },
        ),
        migrations.CreateModel(
            name='AIUsageQuota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_type', models.CharField(choices=[('daily', 'Daily'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], max_length=20)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('max_requests', models.IntegerField()),
                ('max_tokens', models.IntegerField()),
                ('max_cost_usd', models.DecimalField(decimal_places=4, max_digits=10)),
                ('current_requests', models.IntegerField(default=0)),
                ('current_tokens', models.IntegerField(default=0)),
                ('current_cost_usd', models.DecimalField(decimal_places=4, default=0.0, max_digits=10)),
                ('is_exceeded', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_quotas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Usage Quota',
                'verbose_name_plural': 'AI Usage Quotas',
                'db_table': 'ai_usage_quotas',
                'unique_together': {('user', 'period_type', 'period_start')},
            },
        ),
    ]
